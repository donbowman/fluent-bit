---
image: cr.agilicus.com/corp-tools/docker-compose

variables:
  DOCKER_DRIVER: overlay2
  PORT: 2375
  CONTAINER_IMAGE: $CI_REGISTRY/$CI_PROJECT_PATH
  GIT_SUBMODULE_STRATEGY: recursive

stages:
  - test
  - build

test-gcc:
  image: cr.agilicus.com/corp-tools/build-containers/base
  stage: test
  script: |
      CC=gcc FLB_OPT="-DFLB_JEMALLOC=On" ci/do-ut

test-clang:
  image: cr.agilicus.com/corp-tools/build-containers/base
  stage: test
  script: |
      CC=clang FLB_OPT="-DFLB_JEMALLOC=On" ci/do-ut

asan-gcc:
  image: cr.agilicus.com/corp-tools/build-containers/base
  stage: test
  script: |
      CC=gcc FLB_OPT="-DFLB_SANITIZE_ADDRESS=On" ci/do-ut

asan-clang:
  image: cr.agilicus.com/corp-tools/build-containers/base
  stage: test
  script: |
      CC=clang FLB_OPT="-DFLB_SANITIZE_ADDRESS=On" ci/do-ut

# This is currently not 'voting' since there are some false-positives
tsan-gcc:
  image: cr.agilicus.com/corp-tools/build-containers/base
  stage: test
  script: |
      CC=gcc FLB_OPT="-DFLB_SANITIZE_THREAD=On" ci/do-ut || true

tsan-clang:
  image: cr.agilicus.com/corp-tools/build-containers/base
  stage: test
  script: |
      CC=clang FLB_OPT="-DFLB_SANITIZE_THREAD=On" ci/do-ut || true

msan-gcc:
  image: cr.agilicus.com/corp-tools/build-containers/base
  stage: test
  script: |
      CC=gcc FLB_OPT="-DFLB_SANITIZE_MEMORY=On" ci/do-ut

msan-clang:
  image: cr.agilicus.com/corp-tools/build-containers/base
  stage: test
  script: |
      CC=clang FLB_OPT="-DFLB_SANITIZE_MEMORY=On" ci/do-ut

usan-gcc:
  image: cr.agilicus.com/corp-tools/build-containers/base
  stage: test
  script: |
      CC=gcc FLB_OPT="-DFLB_SANITIZE_UNDEFINED=On" ci/do-ut

usan:
  image: cr.agilicus.com/corp-tools/build-containers/base
  stage: test
  script: |
      CC=clang FLB_OPT="-DFLB_SANITIZE_UNDEFINED=On" ci/do-ut

build:
  image: cr.agilicus.com/corp-tools/docker-compose
  stage: build
  services:
    - name: docker:dind
  artifacts:
    name: "$CI_PROJECT_PATH-$CI_COMMIT_REF_NAME"
    paths:
      - reports/
  script: |
      echo Start build
      [ -S /var/run/docker.sock ] || export DOCKER_HOST=tcp://localhost:2375
      [ -S /var/run/docker.sock ] && unset DOCKER_HOST
      docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
      [ -n "$CI_COMMIT_TAG" ] && TAG="$CI_COMMIT_TAG" || TAG="$CI_COMMIT_REF_NAME"

      docker build --tag $CONTAINER_IMAGE:$TAG .
      # This is needed to force the _debug container to come from what we just build
      docker tag $CONTAINER_IMAGE:${TAG} fluent/fluent-bit:latest
      docker build --tag $CONTAINER_IMAGE:${TAG}_debug -f Dockerfile.debug .

      clairctl analyze --log-level debug $CONTAINER_IMAGE:${TAG} || true
      echo Generate JSON report
      clairctl report -f json $CONTAINER_IMAGE:${TAG} || true
      echo Generate HTML report
      clairctl report -f html $CONTAINER_IMAGE:${TAG} || true
      docker push $CONTAINER_IMAGE:${TAG}
      docker push $CONTAINER_IMAGE:${TAG}_debug
      if [ "$CI_COMMIT_REF_NAME" = "integration" ];
      then
        docker tag $CONTAINER_IMAGE:${TAG} $CONTAINER_IMAGE:latest
        docker push $CONTAINER_IMAGE:latest

        docker tag $CONTAINER_IMAGE:${TAG}_debug $CONTAINER_IMAGE:latest_debug
        docker push $CONTAINER_IMAGE:latest_debug
      fi
